CREATE OR REPLACE PROCEDURE CHECK_SALARY (jId Jobs.Job_id%TYPE, sal Jobs.Min_Salary%TYPE)
IS
miSal Jobs.Min_Salary%TYPE;
BEGIN
SELECT Min_Salary
INTO miSal
FROM Jobs
WHERE Job_ID = UPPER(jId);
IF sal < miSal THEN
    RAISE_APPLICATION_ERROR( -20001, 'Invalid salary ' || sal || '. Salary too low for job ' || jId || '.' );
ELSE
    UPDATE Jobs
    SET Min_Salary = sal
    WHERE Job_ID = UPPER(jId);
END IF;
END;
/
CALL CHECK_SALARY('ST_CLERK', 19000);
ROLLBACK ;

CREATE OR REPLACE TRIGGER CHECK_SALARY_TRG
BEFORE INSERT OR UPDATE ON Employees
FOR EACH ROW
BEGIN
CHECK_SALARY(:NEW.Job_ID, :NEW.Salary);
END;
/

UPDATE EMPLOYEES
SET SALARY = 10000
WHERE EMPLOYEE_ID = 100;
-- 100 ist king 10000 ist zu wenig füür ceo 50000 geht wieder.

ALTER TABLE EMPLOYEES ADD
(dateModified DATE,
user_modified VARCHAR2(30));

CREATE OR REPLACE TRIGGER LOG_EMPLOYEES
BEFORE INSERT OR UPDATE ON Employees
FOR EACH ROW
BEGIN
    :new.user_modified := USER;
    :new.dateModified := SYSDATE;
END;
/
INSERT INTO Employees(EMPLOYEE_ID,SALARY,JOB_ID,LAST_NAME,EMAIL,HIRE_DATE) VALUES (300,40000,'SA_REP','MUSTERMANN','MUSTERMAIL',SYSDATE);

SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID = 300;

ROLLBACK;

ALTER TABLE EMPLOYEES
DROP COLUMN dateModified;
ALTER TABLE EMPLOYEES
DROP COLUMN user_modified;